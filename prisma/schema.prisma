// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Submission {
  id            Int              @id @default(autoincrement())
  name          String
  email         String
  phone         String?
  location      String
  submittedAt   DateTime         @map("submitted_at")
  workAvailability String[]      @map("work_availability")
  annualSalaryExpectation Json   @map("annual_salary_expectation")
  workExperiences   WorkExperience[]
  education     Education?
  skills        Skill[]
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
}

model WorkExperience {
  id            Int         @id @default(autoincrement())
  company       String
  roleName      String
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  Int
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

model Education {
  id            Int         @id @default(autoincrement())
  highestLevel  String      @map("highest_level")
  degrees       Degree[]
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  Int         @unique
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

model Degree {
  id            Int         @id @default(autoincrement())
  degree        String
  subject       String
  school        String
  gpa           String
  startDate     String?
  endDate       String?
  originalSchool String?
  isTop50       Boolean?
  isTop25       Boolean?
  education     Education   @relation(fields: [educationId], references: [id], onDelete: Cascade)
  educationId   Int
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
}

model Skill {
  id            Int         @id @default(autoincrement())
  name          String
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId  Int
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([name, submissionId])
}

model SubmissionFilter {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  
  // Filter criteria
  location    String?
  minSalary   Int?
  maxSalary   Int?
  workAvailability String[] // Array of work availability options
  minEducation String?     // Minimum education level
  skills      String[]    // Array of required skills
  
  @@map("submission_filters")
}
